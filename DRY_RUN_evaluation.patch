diff --git a/cgt-nn-rev6wip.ipynb b/cgt-nn-rev6wip.ipynb
index 25792be..0b03781 100644
--- a/cgt-nn-rev6wip.ipynb
+++ b/cgt-nn-rev6wip.ipynb
@@ -910,45 +910,45 @@
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>835</th>\n",
-       "      <td>evaluate_RegularNetwork_2_p0.99_N9</td>\n",
-       "      <td>evaluate</td>\n",
-       "      <td>RegularNetwork</td>\n",
-       "      <td>2</td>\n",
+       "      <th>415</th>\n",
+       "      <td>loss_AugmentedReLUNetwork_1_p0.99_N9</td>\n",
+       "      <td>loss</td>\n",
+       "      <td>AugmentedReLUNetwork</td>\n",
+       "      <td>1</td>\n",
        "      <td>0.99</td>\n",
        "      <td>9</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>836</th>\n",
-       "      <td>evaluate_RegularNetwork_3_p0.99_N9</td>\n",
-       "      <td>evaluate</td>\n",
+       "      <th>416</th>\n",
+       "      <td>loss_RegularNetwork_2_p0.99_N9</td>\n",
+       "      <td>loss</td>\n",
        "      <td>RegularNetwork</td>\n",
-       "      <td>3</td>\n",
+       "      <td>2</td>\n",
        "      <td>0.99</td>\n",
        "      <td>9</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>837</th>\n",
-       "      <td>evaluate_AugmentedReLUNetwork_1_p0.99_N9</td>\n",
-       "      <td>evaluate</td>\n",
+       "      <th>417</th>\n",
+       "      <td>loss_AugmentedReLUNetwork_2_p0.99_N9</td>\n",
+       "      <td>loss</td>\n",
        "      <td>AugmentedReLUNetwork</td>\n",
-       "      <td>1</td>\n",
+       "      <td>2</td>\n",
        "      <td>0.99</td>\n",
        "      <td>9</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>838</th>\n",
-       "      <td>evaluate_AugmentedReLUNetwork_2_p0.99_N9</td>\n",
-       "      <td>evaluate</td>\n",
-       "      <td>AugmentedReLUNetwork</td>\n",
-       "      <td>2</td>\n",
+       "      <th>418</th>\n",
+       "      <td>loss_RegularNetwork_3_p0.99_N9</td>\n",
+       "      <td>loss</td>\n",
+       "      <td>RegularNetwork</td>\n",
+       "      <td>3</td>\n",
        "      <td>0.99</td>\n",
        "      <td>9</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>839</th>\n",
-       "      <td>evaluate_AugmentedReLUNetwork_3_p0.99_N9</td>\n",
-       "      <td>evaluate</td>\n",
+       "      <th>419</th>\n",
+       "      <td>loss_AugmentedReLUNetwork_3_p0.99_N9</td>\n",
+       "      <td>loss</td>\n",
        "      <td>AugmentedReLUNetwork</td>\n",
        "      <td>3</td>\n",
        "      <td>0.99</td>\n",
@@ -956,37 +956,37 @@
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
-       "<p>840 rows × 6 columns</p>\n",
+       "<p>420 rows × 6 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
-       "                                          Key Measurement  \\\n",
-       "0                 loss_RegularNetwork_1_p0_N0        loss   \n",
-       "1           loss_AugmentedReLUNetwork_1_p0_N0        loss   \n",
-       "2                 loss_RegularNetwork_2_p0_N0        loss   \n",
-       "3           loss_AugmentedReLUNetwork_2_p0_N0        loss   \n",
-       "4                 loss_RegularNetwork_3_p0_N0        loss   \n",
-       "..                                        ...         ...   \n",
-       "835        evaluate_RegularNetwork_2_p0.99_N9    evaluate   \n",
-       "836        evaluate_RegularNetwork_3_p0.99_N9    evaluate   \n",
-       "837  evaluate_AugmentedReLUNetwork_1_p0.99_N9    evaluate   \n",
-       "838  evaluate_AugmentedReLUNetwork_2_p0.99_N9    evaluate   \n",
-       "839  evaluate_AugmentedReLUNetwork_3_p0.99_N9    evaluate   \n",
+       "                                      Key Measurement               Network  \\\n",
+       "0             loss_RegularNetwork_1_p0_N0        loss        RegularNetwork   \n",
+       "1       loss_AugmentedReLUNetwork_1_p0_N0        loss  AugmentedReLUNetwork   \n",
+       "2             loss_RegularNetwork_2_p0_N0        loss        RegularNetwork   \n",
+       "3       loss_AugmentedReLUNetwork_2_p0_N0        loss  AugmentedReLUNetwork   \n",
+       "4             loss_RegularNetwork_3_p0_N0        loss        RegularNetwork   \n",
+       "..                                    ...         ...                   ...   \n",
+       "415  loss_AugmentedReLUNetwork_1_p0.99_N9        loss  AugmentedReLUNetwork   \n",
+       "416        loss_RegularNetwork_2_p0.99_N9        loss        RegularNetwork   \n",
+       "417  loss_AugmentedReLUNetwork_2_p0.99_N9        loss  AugmentedReLUNetwork   \n",
+       "418        loss_RegularNetwork_3_p0.99_N9        loss        RegularNetwork   \n",
+       "419  loss_AugmentedReLUNetwork_3_p0.99_N9        loss  AugmentedReLUNetwork   \n",
        "\n",
-       "                  Network  Dataset     P  N  \n",
-       "0          RegularNetwork        1  0.00  0  \n",
-       "1    AugmentedReLUNetwork        1  0.00  0  \n",
-       "2          RegularNetwork        2  0.00  0  \n",
-       "3    AugmentedReLUNetwork        2  0.00  0  \n",
-       "4          RegularNetwork        3  0.00  0  \n",
-       "..                    ...      ...   ... ..  \n",
-       "835        RegularNetwork        2  0.99  9  \n",
-       "836        RegularNetwork        3  0.99  9  \n",
-       "837  AugmentedReLUNetwork        1  0.99  9  \n",
-       "838  AugmentedReLUNetwork        2  0.99  9  \n",
-       "839  AugmentedReLUNetwork        3  0.99  9  \n",
+       "     Dataset     P  N  \n",
+       "0          1  0.00  0  \n",
+       "1          1  0.00  0  \n",
+       "2          2  0.00  0  \n",
+       "3          2  0.00  0  \n",
+       "4          3  0.00  0  \n",
+       "..       ...   ... ..  \n",
+       "415        1  0.99  9  \n",
+       "416        2  0.99  9  \n",
+       "417        2  0.99  9  \n",
+       "418        3  0.99  9  \n",
+       "419        3  0.99  9  \n",
        "\n",
-       "[840 rows x 6 columns]"
+       "[420 rows x 6 columns]"
       ]
      },
      "execution_count": 7,
@@ -1012,7 +1012,34 @@
    "execution_count": 8,
    "id": "a60f12cb",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "ename": "TypeError",
+     "evalue": "ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[8], line 99\u001b[0m\n\u001b[1;32m     91\u001b[0m         plot_params\u001b[38;5;241m=\u001b[39mPlotParams(\n\u001b[1;32m     92\u001b[0m             measurement\u001b[38;5;241m=\u001b[39mmeasurement,\n\u001b[1;32m     93\u001b[0m             dataset\u001b[38;5;241m=\u001b[39mdataset,\n\u001b[1;32m     94\u001b[0m             metric\u001b[38;5;241m=\u001b[39mmetric,\n\u001b[1;32m     95\u001b[0m             p\u001b[38;5;241m=\u001b[39mp,\n\u001b[1;32m     96\u001b[0m         )\n\u001b[1;32m     98\u001b[0m         curve\u001b[38;5;241m=\u001b[39mcompute_dataframe(plot_params\u001b[38;5;241m=\u001b[39mplot_params)\n\u001b[0;32m---> 99\u001b[0m         \u001b[43mplot_curve\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    100\u001b[0m \u001b[43m            \u001b[49m\u001b[43max\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxs\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mj\u001b[49m\u001b[43m]\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mmetrics\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m>\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43maxs\u001b[49m\u001b[43m[\u001b[49m\u001b[43mj\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    101\u001b[0m \u001b[43m            \u001b[49m\u001b[43mmeans\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurve\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mmean\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    102\u001b[0m \u001b[43m            \u001b[49m\u001b[43mlowerqs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurve\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0.25\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    103\u001b[0m \u001b[43m            \u001b[49m\u001b[43mupperqs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurve\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0.75\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    104\u001b[0m \u001b[43m            \u001b[49m\u001b[43mzmeans\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreference_curve\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mmean\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    105\u001b[0m \u001b[43m            \u001b[49m\u001b[43mzlowerqs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreference_curve\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0.25\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m            \u001b[49m\u001b[43mzupperqs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreference_curve\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0.75\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m            \u001b[49m\u001b[43mX\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurve\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m            \u001b[49m\u001b[43mtitle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43mf\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mp = \u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mplot_params\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mp\u001b[49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m            \u001b[49m\u001b[43mxlabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mxlabel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[43m            \u001b[49m\u001b[43mylabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmetric\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    111\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    112\u001b[0m fig\u001b[38;5;241m.\u001b[39msuptitle(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDataset #\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mplot_params\u001b[38;5;241m.\u001b[39mdataset\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    113\u001b[0m plt\u001b[38;5;241m.\u001b[39mtight_layout()\n",
+      "Cell \u001b[0;32mIn[8], line 56\u001b[0m, in \u001b[0;36mplot_curve\u001b[0;34m(ax, means, lowerqs, upperqs, zmeans, zlowerqs, zupperqs, X, title, xlabel, ylabel)\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mplot_curve\u001b[39m(\n\u001b[1;32m     43\u001b[0m     ax: \u001b[38;5;28mobject\u001b[39m,\n\u001b[1;32m     44\u001b[0m     means: pd\u001b[38;5;241m.\u001b[39mSeries,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     53\u001b[0m     ylabel: \u001b[38;5;28mstr\u001b[39m,\n\u001b[1;32m     54\u001b[0m ):\n\u001b[1;32m     55\u001b[0m     ax\u001b[38;5;241m.\u001b[39mplot(X, zmeans, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMean of p = 0\u001b[39m\u001b[38;5;124m'\u001b[39m, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlightblue\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m---> 56\u001b[0m     \u001b[43max\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfill_between\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mzlowerqs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mzupperqs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlightgray\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malpha\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0.5\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m0.25 to 0.75 Quantiles, p = 0\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     57\u001b[0m     ax\u001b[38;5;241m.\u001b[39mplot(X, means, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMean\u001b[39m\u001b[38;5;124m'\u001b[39m, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblue\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     58\u001b[0m     ax\u001b[38;5;241m.\u001b[39mfill_between(X, lowerqs, upperqs, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgray\u001b[39m\u001b[38;5;124m'\u001b[39m, alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.5\u001b[39m, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m0.25 to 0.75 Quantiles\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
+      "File \u001b[0;32m~/.pyenv/versions/3.12.3/lib/python3.12/site-packages/matplotlib/__init__.py:1473\u001b[0m, in \u001b[0;36m_preprocess_data.<locals>.inner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[1;32m   1471\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner\u001b[39m(ax, \u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m   1472\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1473\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1474\u001b[0m \u001b[43m            \u001b[49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1475\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;28;43mmap\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msanitize_sequence\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1476\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m{\u001b[49m\u001b[43mk\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43msanitize_sequence\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mk\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mv\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mitems\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1478\u001b[0m     bound \u001b[38;5;241m=\u001b[39m new_sig\u001b[38;5;241m.\u001b[39mbind(ax, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1479\u001b[0m     auto_label \u001b[38;5;241m=\u001b[39m (bound\u001b[38;5;241m.\u001b[39marguments\u001b[38;5;241m.\u001b[39mget(label_namer)\n\u001b[1;32m   1480\u001b[0m                   \u001b[38;5;129;01mor\u001b[39;00m bound\u001b[38;5;241m.\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mget(label_namer))\n",
+      "File \u001b[0;32m~/.pyenv/versions/3.12.3/lib/python3.12/site-packages/matplotlib/axes/_axes.py:5648\u001b[0m, in \u001b[0;36mAxes.fill_between\u001b[0;34m(self, x, y1, y2, where, interpolate, step, **kwargs)\u001b[0m\n\u001b[1;32m   5646\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfill_between\u001b[39m(\u001b[38;5;28mself\u001b[39m, x, y1, y2\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m, where\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, interpolate\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m   5647\u001b[0m                  step\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m-> 5648\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fill_between_x_or_y\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   5649\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my2\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5650\u001b[0m \u001b[43m        \u001b[49m\u001b[43mwhere\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mwhere\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minterpolate\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minterpolate\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/.pyenv/versions/3.12.3/lib/python3.12/site-packages/matplotlib/axes/_axes.py:5548\u001b[0m, in \u001b[0;36mAxes._fill_between_x_or_y\u001b[0;34m(self, ind_dir, ind, dep1, dep2, where, interpolate, step, **kwargs)\u001b[0m\n\u001b[1;32m   5544\u001b[0m         kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfacecolor\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \\\n\u001b[1;32m   5545\u001b[0m             \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_patches_for_fill\u001b[38;5;241m.\u001b[39mget_next_color()\n\u001b[1;32m   5547\u001b[0m \u001b[38;5;66;03m# Handle united data, such as dates\u001b[39;00m\n\u001b[0;32m-> 5548\u001b[0m ind, dep1, dep2 \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmap\u001b[39m(\n\u001b[1;32m   5549\u001b[0m     ma\u001b[38;5;241m.\u001b[39mmasked_invalid, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_process_unit_info(\n\u001b[1;32m   5550\u001b[0m         [(ind_dir, ind), (dep_dir, dep1), (dep_dir, dep2)], kwargs))\n\u001b[1;32m   5552\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m name, array \u001b[38;5;129;01min\u001b[39;00m [\n\u001b[1;32m   5553\u001b[0m         (ind_dir, ind), (\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdep_dir\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m\"\u001b[39m, dep1), (\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdep_dir\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m2\u001b[39m\u001b[38;5;124m\"\u001b[39m, dep2)]:\n\u001b[1;32m   5554\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m array\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n",
+      "File \u001b[0;32m~/.pyenv/versions/3.12.3/lib/python3.12/site-packages/numpy/ma/core.py:2360\u001b[0m, in \u001b[0;36mmasked_invalid\u001b[0;34m(a, copy)\u001b[0m\n\u001b[1;32m   2333\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   2334\u001b[0m \u001b[38;5;124;03mMask an array where invalid values occur (NaNs or infs).\u001b[39;00m\n\u001b[1;32m   2335\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   2357\u001b[0m \n\u001b[1;32m   2358\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   2359\u001b[0m a \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(a, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, subok\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m-> 2360\u001b[0m res \u001b[38;5;241m=\u001b[39m masked_where(\u001b[38;5;241m~\u001b[39m(\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43misfinite\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m)\u001b[49m), a, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m   2361\u001b[0m \u001b[38;5;66;03m# masked_invalid previously never returned nomask as a mask and doing so\u001b[39;00m\n\u001b[1;32m   2362\u001b[0m \u001b[38;5;66;03m# threw off matplotlib (gh-22842).  So use shrink=False:\u001b[39;00m\n\u001b[1;32m   2363\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m res\u001b[38;5;241m.\u001b[39m_mask \u001b[38;5;129;01mis\u001b[39;00m nomask:\n",
+      "\u001b[0;31mTypeError\u001b[0m: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 2400x1800 with 18 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "# 3. Вывод графиков\n",
     "\n",
diff --git a/cgtnnlib/common.py b/cgtnnlib/common.py
index 456e121..522c37e 100644
--- a/cgtnnlib/common.py
+++ b/cgtnnlib/common.py
@@ -784,25 +784,32 @@ def evaluate_regression_model(
     dataset: Dataset,
     report_key: str,
 )-> pd.DataFrame:
-    samples = {
-        'noise_factor': NOISE_FACTORS,
-        'r2': [],
-        'mse': [],
-    }
-
-    for noise_factor in NOISE_FACTORS:
-        r2, mse = eval_r2_mse(
-            evaluated_model=evaluated_model,
-            dataset=dataset,
-            noise_factor=noise_factor,
-        )
+    if DRY_RUN:
+        return {
+            'noise_factor': NOISE_FACTORS,
+            'r2': [33 for x in range(len(NOISE_FACTORS))],
+            'mse': [33 for x in range(len(NOISE_FACTORS))],
+        }
+    else:
+        samples = {
+            'noise_factor': NOISE_FACTORS,
+            'r2': [],
+            'mse': [],
+        }
+
+        for noise_factor in NOISE_FACTORS:
+            r2, mse = eval_r2_mse(
+                evaluated_model=evaluated_model,
+                dataset=dataset,
+                noise_factor=noise_factor,
+            )
 
-        samples['r2'].append(r2)
-        samples['mse'].append(mse)
+            samples['r2'].append(r2)
+            samples['mse'].append(mse)
 
-    append_to_report(report_key, samples)
+        append_to_report(report_key, samples)
 
-    return pd.DataFrame(samples)
+        return pd.DataFrame(samples)
 
 def evaluate_classification_model(
     evaluated_model: RegularNetwork,
@@ -810,28 +817,36 @@ def evaluate_classification_model(
     report_key: str,
     is_binary_classification: bool,
 )-> pd.DataFrame:
-    samples = {
-        'noise_factor': NOISE_FACTORS,
-        'accuracy': [],
-        'f1': [],
-        'roc_auc': [],
-    }
-
-    for noise_factor in NOISE_FACTORS:
-        accuracy, f1, roc_auc = eval_accuracy_f1_rocauc(
-            evaluated_model=evaluated_model,
-            dataset=dataset,
-            noise_factor=noise_factor,
-            is_binary_classification=is_binary_classification,
-        )
+    if DRY_RUN:
+        return {
+            'noise_factor': NOISE_FACTORS,
+            'accuracy': [33 for x in range(len(NOISE_FACTORS))],
+            'f1': [33 for x in range(len(NOISE_FACTORS))],
+            'roc_auc': [33 for x in range(len(NOISE_FACTORS))],
+        }
+    else:
+        samples = {
+            'noise_factor': NOISE_FACTORS,
+            'accuracy': [],
+            'f1': [],
+            'roc_auc': [],
+        }
+
+        for noise_factor in NOISE_FACTORS:
+            accuracy, f1, roc_auc = eval_accuracy_f1_rocauc(
+                evaluated_model=evaluated_model,
+                dataset=dataset,
+                noise_factor=noise_factor,
+                is_binary_classification=is_binary_classification,
+            )
 
-        samples['accuracy'].append(accuracy)
-        samples['f1'].append(f1)
-        samples['roc_auc'].append(roc_auc)
+            samples['accuracy'].append(accuracy)
+            samples['f1'].append(f1)
+            samples['roc_auc'].append(roc_auc)
 
-    append_to_report(report_key, samples)
+        append_to_report(report_key, samples)
 
-    return pd.DataFrame(samples)
+        return pd.DataFrame(samples)
 
 def plot_evaluation_of_classification(
     df: pd.DataFrame,
